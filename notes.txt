AWSServiceRoleForAmazonEKSNodegroup - node group
AWSServiceRoleForAmazonEKS - cluster


    Docker images in your repository in DockerHub
    TravisCI build pipeline showing successful build jobs
    Kubernetes kubectl get pods output
    Kubernetes kubectl describe services output
    Kubernetes kubectl describe hpa output
    Kubernetes kubectl logs <your pod name> output



1. Create images - docker-compose -f docker-compose-build.yaml build --parallel

2. Run containers - docker-compose up

3. Ensure that the environment variables are read correctly while running the containers. - $ docker-compose config
name: udacity-project-3
services:
  backend-feed:
    environment:
      AWS_BUCKET: arn:aws:s3:::proj-3-bucket
      AWS_PROFILE: udacity-dev
      AWS_REGION: us-east-1
      JWT_SECRET: testing
      POSTGRES_DB: postgres
      POSTGRES_HOST: project-3-database.chba8fpxaft8.us-east-1.rds.amazonaws.com
      POSTGRES_PASSWORD: qwerty456!
      POSTGRES_USERNAME: postgres
      URL: http://localhost:8100
    image: udagram-api-feed
    networks:
      default: null
    volumes:
    - type: bind
      source: C:\Users\MWANGIMM/.aws
      target: /root/.aws
      bind:
        create_host_path: true
  backend-user:
    environment:
      AWS_BUCKET: arn:aws:s3:::proj-3-bucket
      AWS_PROFILE: udacity-dev
      AWS_REGION: us-east-1
      JWT_SECRET: testing
      POSTGRES_DB: postgres
      POSTGRES_HOST: project-3-database.chba8fpxaft8.us-east-1.rds.amazonaws.com
      POSTGRES_PASSWORD: qwerty456!
      POSTGRES_USERNAME: postgres
      URL: http://localhost:8100
    image: udagram-api-user
    networks:
      default: null
  frontend:
    image: udagram-frontend
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8100"
      protocol: tcp
  reverseproxy:
    depends_on:
      backend-feed:
        condition: service_started
      backend-user:
        condition: service_started
    image: reverseproxy
    networks:
      default: null
    ports:
    - mode: ingress
      target: 8080
      published: "8080"
      protocol: tcp
    restart: always
networks:
  default:
    name: udacity-project-3_default

4. If rebuilding the images, you must delete the existing images locally, using:

# Run from the directory where you have the compose file present
docker-compose down
# To delete all dangling images
docker image prune --all

mathenge-cluster

[mathenge-udacity-dev]
aws_access_key_id = AKIAXFZHUPENOVTLFJ7R
aws_secret_access_key = 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

[udacity-dev]
aws_access_key_id = AKIA5KOHS3XE7ZGP7XGH
aws_secret_access_key = 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

[default]
aws_access_key_id = AKIA5KOHS3XE7ZGP7XGH
aws_secret_access_key = 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

[root]
aws_access_key_id = AKIA5KOHS3XEVXJKLC7J
aws_secret_access_key = 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






